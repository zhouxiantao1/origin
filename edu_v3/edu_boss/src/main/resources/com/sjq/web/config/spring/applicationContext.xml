<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task-3.0.xsd
                        http://www.springframework.org/schema/cache 
                        http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">

	<!-- jdbc.properties文件路径,es-hosts配置 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/com/sjq/web/config/jdbc.properties</value>
				<value>classpath:/com/sjq/web/config/es-hosts.properties</value>
				<value>classpath:/com/sjq/web/config/redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源的配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- data source configuration -->
		<property name="initialSize" value="300" /><!-- initial connections -->
		<property name="maxActive" value="1000" /><!-- MAX connections -->
		<property name="maxIdle" value="100" /><!-- MAX idle connections -->
		<property name="minIdle" value="50" /><!-- MIN idle connections -->
		<!-- 处理mysql 8小时自动断开连接的问题 -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="validationQuery" value="select 1" />
		<property name="timeBetweenEvictionRunsMillis" value="20000" />
		<property name="numTestsPerEvictionRun" value="100" />
		<property name="filters" value="${druid.filters}" />
	</bean>
	<!--事务相关控制 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<context:component-scan base-package="com.sjq" />
	<!--启动注解 @Transactional -->
	<tx:annotation-driven />

	<!-- MyBatis sqlSessionFactory 配置 mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:/com/sjq/web/mybatis/SqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 设置字段内容长度，这里不做限定 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />

	<!-- 线程池 -->
	<!--spring线程池 -->
	<bean id="threadPool"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!--核心线程数 -->
		<property name="corePoolSize" value="20" />
		<!--最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!--队列最大长度 -->
		<property name="queueCapacity" value="200" />
		<!--线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="300" />
		<!--程序关闭时等待线程执行完毕 -->
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
	</bean>
	
	
		
	<!--=========================== 配置缓存=========================== -->

	<!-- 配置Ehcache缓存管理器,读取配置文件 -->
	<bean id="ehCacheManagerFactoryBean" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	<property name="configLocation" value="classpath:/com/sjq/web/config/ehcache.xml"></property>
	</bean>
	
	<!-- 配置缓存管理器,获取cache -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
	<property name="cacheManager" ref="ehCacheManagerFactoryBean" />
	</bean>
	
	
	

	<!-- 定时任务 -->
	<!-- <task:scheduled-tasks> -->
	<!-- <task:scheduled ref="SiteOrderService" method="receiptConfirmation" 
		cron="59 59 23 ? * *"/> -->
	<!-- </task:scheduled-tasks> -->

	<!-- 整合redis服务 -->

<!-- 	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
		<!-- 最小空闲连接数 -->
<!-- 		<property name="minIdle" value="${redis.minIdle}" /> -->
		<!-- 最大空闲连接数 -->
<!-- 		<property name="maxIdle" value="${redis.maxIdle}" /> -->
		<!-- 最大连接数 -->
<!-- 		<property name="maxTotal" value="${redis.maxTotal}"/> -->
		<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
<!-- 		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"/> -->
		<!-- 在获取连接的时候检查有效性, 默认false -->
<!-- 		<property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
		<!-- 每次释放连接的最大数目 -->
<!-- 		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" /> -->
		<!-- 释放连接的扫描间隔（毫秒） -->
<!-- 		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" /> -->
		<!-- 连接最小空闲时间 -->
<!-- 		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" /> -->
		<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
<!-- 		<property name="softMinEvictableIdleTimeMillis" value="${redis.softMinEvictableIdleTimeMillis}" /> -->
		<!-- 在空闲时检查有效性, 默认false -->
<!-- 		<property name="testWhileIdle" value="${redis.testWhileIdle}" /> -->
		<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
<!-- 		<property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/> -->
<!-- 	</bean> -->

<!-- 	<bean id="connectionFactory" -->
<!-- 		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" -->
<!-- 		p:host-name="${redis.host}" p:port="${redis.port}" p:pool-config-ref="poolConfig" /> -->

<!-- 	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"> -->
<!-- 		<property name="connectionFactory" ref="connectionFactory" /> -->
<!-- 		<property name="keySerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="valueSerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="hashKeySerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.StringRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 		<property name="hashValueSerializer"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!--esClientManager,设置为单例-->
<!--     <bean id="esClientManager" class="com.sjq.common.es.client.ESClientManager" scope="singleton"> -->
<!--         <constructor-arg index="0" type="java.lang.String"> -->
<!--             <value>${es.hosts}</value> -->
<!--         </constructor-arg> -->
<!--         <constructor-arg index="1" type="java.lang.String" value="${es.cluster.name}"/> -->
<!--     </bean> -->
    
    <!--=========================== 配置作业调度=========================== -->
	<import resource="../job/applicationContext-quartz-job.xml"  />

 

</beans>
